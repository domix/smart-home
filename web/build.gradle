repositories {
    // https://nodejs.org/dist/v10.16.3/node-v10.16.3-linux-x64.tar.xz
    ivy {
        url 'https://nodejs.org/dist/'
        patternLayout {
            //This maps to the pattern: [organisation]:[module]:[revision]:[classifier]@[ext]
            artifact '/v[revision]/[organisation]-v[revision]-[module].[ext]'
        }
    }
}

configurations {
    nodejs
}

dependencies {
    nodejs group: 'node', name: project.'nodejs.platform', version: project.'nodejs.version', ext: 'tar.xz'
}

project.ext {
    nodejs = file("$projectDir/node-v${project.'nodejs.version'}-${project.'nodejs.platform'}/bin/node")
    npm = file("$projectDir/node-v${project.'nodejs.version'}-${project.'nodejs.platform'}/bin/npm")
    npx = file("$projectDir/node-v${project.'nodejs.version'}-${project.'nodejs.platform'}/bin/npx")
}

task install() {
    onlyIf {
        !file("$projectDir/node-v${project.'nodejs.version'}-${project.'nodejs.platform'}").exists()
    }

    doLast {
        println "Nodejs: ${project.'nodejs.version'} will be installed..."
        final File dist = project.configurations['nodejs'].files[0]
        exec {
            commandLine 'tar', '-xf', dist.path, '-C', projectDir
        }
    }
}

/**
 * To be able to use: nodejs, npm and npx tasks.
 * The common pattern is:
 *          ./gradlew web:app:{nodejs|npm|npx} <<<'run build'
 */
subprojects {
    task nodejs(dependsOn: parent.tasks['install']) {
        doLast {
            def options = new Scanner(System.in).nextLine().split(' ')
            println ">> Executing: ${parent.npm.path}"
            println ">> Options $options"
            exec {
                println ">> Working Dir: $workingDir"
                executable parent.nodejs.path
                args options
                errorOutput = System.out
                ignoreExitValue = true
            }
        }
    }

    task npm(dependsOn: parent.tasks['install']) {
        doLast {
            def options = new Scanner(System.in).nextLine().split(' ')
            println ">> Executing: ${parent.npm.path}"
            println ">> Options $options"
            exec {
                println ">> Working Dir: $workingDir"
                executable parent.npm.path
                args options
                errorOutput = System.out
                ignoreExitValue = true
            }
        }
    }

    task npx(dependsOn: parent.tasks['install']) {
        doLast {
            def options = new Scanner(System.in).nextLine().split(' ')
            println ">> Executing: ${parent.npx.path}"
            println ">> Options $options"
            exec {
                println ">> Working Dir: $workingDir"
                executable parent.npx.path
                args options
                errorOutput = System.out
                ignoreExitValue = true
            }
        }
    }
}