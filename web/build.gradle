repositories {
    // https://nodejs.org/dist/v10.16.3/node-v10.16.3-linux-x64.tar.xz
    ivy {
        url 'https://nodejs.org/dist/'
        patternLayout {
            //This maps to the pattern: [organisation]:[module]:[revision]:[classifier]@[ext]
            artifact '/v[revision]/[organisation]-v[revision]-[module].[ext]'
        }
        metadataSources {
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
}

configurations {
    nodejs
}

dependencies {
    nodejs group: 'node', name: project.'nodejs.platform', version: project.'nodejs.version', ext: 'tar.xz'
}

def nodeJsHome = file("$projectDir/node-v${project.'nodejs.version'}-${project.'nodejs.platform'}")
task install() {
    onlyIf {
        !nodeJsHome.exists()
    }

    doLast {
        println "Nodejs: ${project.'nodejs.version'} will be installed..."
        def dist = project.configurations.nodejs.files[0]
        exec {
            commandLine 'tar', '-xf', dist.path, '-C', projectDir
        }
    }
}

/**
 * To be able to use: nodejs, npm and npx tasks.
 * The common pattern is:
 *          ./gradlew web:app:{nodejs|npm|npx} <<<'run build'
 */
subprojects {
    // going through {nodejs|npm|npx}
    fileTree(file("$nodeJsHome/bin")).files.each { f ->
        // creates a new task under sub-projects
        task "${f.name}"(dependsOn: parent.tasks['install']) {
            group 'NodeJs'
            description "To be able to use: ${f.path}"

            doLast {
                def options = new Scanner(System.in).nextLine().split(' ')
                println ">> Executing: ${f.path}"
                println ">> Options $options"
                println ">> Working Dir: $projectDir"
                exec {
                    workingDir projectDir
                    executable f.path
                    args options
                    errorOutput = System.out
                    ignoreExitValue = true
                }
            }
        }
    }
}