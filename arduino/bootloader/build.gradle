import org.apache.tools.ant.filters.ReplaceTokens
import com.github.zhurlik.task.Avrdude

plugins {
    id 'distribution'
    id 'com.github.zhurlik.arduino' version '0.3'
}

distributions {
    main {
        baseName = 'bootloaders-asm'
        contents {
            def network = [
                    'server.ip' : '192,168,100,3',
                    'gateway.ip': '192,168,100,1',
                    'subnetmask': '255,255,255,0',
            ]

            /**
             * Bootloader for Arduino with MAC: a0-b1-c2-c2-a0-b1 and IP: 192.168.100.201
             */
            from('src/main/resources/kiloboot.asm') {
                filter(ReplaceTokens, tokens: [
                        'file.bin' : '192-168-100-201.bin',
                        'device.ip': '192,168,100,201',
                        'mac.0'    : '0xa0',
                        'mac.1'    : '0xb1',
                        'mac.2'    : '0xc2',
                        'mac.3'    : '0xc2',
                        'mac.4'    : '0xa0',
                        'mac.5'    : '0xb1'

                ] + network)
                filteringCharset = 'UTF-8'
                rename 'kiloboot.asm', '192-168-100-201.asm'
            }

            /**
             * Bootloader for Arduino with MAC: a0-b1-c2-c2-a0-c2 and IP: 192.168.100.202
             */
            from('src/main/resources/kiloboot.asm') {
                filter(ReplaceTokens, tokens: [
                        'file.bin' : '192-168-100-202.bin',
                        'device.ip': '192,168,100,202',
                        'mac.0'    : '0xa0',
                        'mac.1'    : '0xb1',
                        'mac.2'    : '0xc2',
                        'mac.3'    : '0xc2',
                        'mac.4'    : '0xa0',
                        'mac.5'    : '0xc2'

                ] + network)
                filteringCharset = 'UTF-8'
                rename 'kiloboot.asm', '192-168-100-202.asm'
            }
        }
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

task asmToHex(dependsOn: 'installDist') {
    doLast {
        mkdir('build/bootloaders-hex')
        fileTree(dir: 'build/install/bootloaders-asm', include: '*.asm').files.each { asm ->
            println ">> wine bin/avrasm2.exe -fI -I src/main/asm/m238pdef.inc build/install/bootloaders-asm/${asm.name} -o build/bootloaders-hex/${asm.name.replace('.asm', '.hex')}"
            exec {
                commandLine 'wine', 'bin/avrasm2.exe',
                        '-fI', '-I', 'src/main/asm',
                        "build/install/bootloaders-asm/${asm.name}",
                        '-o', "build/bootloaders-hex/${asm.name.replace('.asm', '.hex')}"
            }
        }
    }
}

evaluationDependsOn(':arduino:ide')

// Arduino IDE
ArduinoIde {
    homeDir project(':arduino:ide').ArduinoIde.homeDir
}

// define task for avrdude
task burn(type: Avrdude) {
    onlyIf {
        // should be passed via -Pkey=value
        project.hasProperty('hex')
    }

    doFirst {
        def hexDir = project.file("$buildDir/bootloaders-hex").path
        //-c avrispmkII -p m328p -U flash:w:"build/bootloaders-hex/192-168-100-201.hex":i -B10
        options.addAll([
                '-c', 'avrispmkII',
                '-p', 'm328p',
                '-U', "flash:w:${hexDir}/$hex:i",
                '-B10'
        ])

        println ">> Avrdude Options: $options"
    }
}